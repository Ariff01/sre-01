-- Select all columns from ExerciseCategory and Exercise.
-- The tables should be joined on ExerciseCategoryId.
-- This query returns all Exercises and their associated ExerciseCategory.
-- 64 rows
--------------------
select * from ExerciseCategory c
inner join Exercise e
on c.ExerciseCategoryId = e.ExerciseCategoryId;
    
-- Select ExerciseCategory.Name and Exercise.Name
-- where the ExerciseCategory does not have a ParentCategoryId (it is null).
-- Again, join the tables on their shared key (ExerciseCategoryId).
-- 9 rows
--------------------
select c.name,e.name
from ExerciseCategory c
inner join Exercise e
on c.ExerciseCategoryId = e.ExerciseCategoryId
where c.ParentCategoryId is null;

-- The query above is a little confusing. At first glance, it's hard to tell
-- which Name belongs to ExerciseCategory and which belongs to Exercise.
-- Rewrite the query using an aliases. 
-- Alias ExerciseCategory.Name as 'CategoryName'.
-- Alias Exercise.Name as 'ExerciseName'.
-- 9 rows
--------------------
select c.name as CategoryName ,e.name as ExerciseName
from ExerciseCategory c
inner join Exercise e
on c.ExerciseCategoryId = e.ExerciseCategoryId
where c.ParentCategoryId is null;

-- Select FirstName, LastName, and BirthDate from Client
-- and EmailAddress from Login 
-- where Client.BirthDate is in the 1990s.
-- Join the tables by their key relationship. 
-- What is the primary-foreign key relationship?
-- 35 rows
--------------------
select cl.FirstName,cl.LastName,cl.BirthDate,l.EmailAddress
from `Client` cl 
inner join Login l
on cl.ClientId 
where cl.BirthDate like '199%';

-- Select Workout.Name, Client.FirstName, and Client.LastName
-- for Clients with LastNames starting with 'C'?
-- How are Clients and Workouts related?
-- 25 rows
--------------------
Select w.`Name`, cl.FirstName,cl.LastName 
from `Client` cl
inner join ClientWorkout cw
on cl.ClientId=cw.ClientID
inner join Workout w
on cw.WorkoutId=w.WorkoutId
where cl.LastName like 'C%';

-- Select Names from Workouts and their Goals.
-- This is a many-to-many relationship with a bridge table.
-- Use aliases appropriately to avoid ambiguous columns in the result.
--------------------
select w.`name`,g.`name`
from Workout w
inner join WorkoutGoal wg
on w.WorkoutId=wg.WorkoutId
inner join Goal g
on g.GoalId=wg.GoalId;
 


-- Select FirstName and LastName from Client.
-- Select ClientId and EmailAddress from Login.
-- Join the tables, but make Login optional.
-- 500 rows
--------------------
select cl.FirstName,cl.LastName,l.ClientId,l.EmailAddress
from `Client` cl
left join Login l
on cl.CLientId=l.ClientId;

-- Using the query above as a foundation, select Clients
-- who do _not_ have a Login.
-- 200 rows
--------------------
select cl.FirstName,cl.LastName
from `Client` cl
left join Login l
on cl.CLientId=l.ClientId
where l.CLientID is null;

-- Does the Client, Romeo Seaward, have a Login?
-- Decide using a single query.
-- nope :(
--------------------
select l.ClientId
from `Client` cl
left join Login l
on cl.CLientId=l.ClientId
where cl.FirstName='Romeo' and cl.LastName='Seaward';


-- Select ExerciseCategory.Name and its parent ExerciseCategory's Name.
-- This requires a self-join.
-- 12 rows
--------------------
select a.`Name` Category1,b.`Name` Category2
from ExerciseCategory a
inner join ExerciseCategory b 
on a.ParentCategoryId = b.ExerciseCategoryId;
    
-- Rewrite the query above so that every ExerciseCategory.Name is
-- included, even if it doesn't have a parent.
-- 16 rows
--------------------
select p.`Name` Categoryparent,c.`Name` Category
from ExerciseCategory c
left join ExerciseCategory p
on c.ParentCategoryId = p.ExerciseCategoryId;    
    
-- Are there Clients who are not signed up for a Workout?
-- 50 rows
--------------------
select cl.FirstName,cl.LastName
from `Client` cl
left join ClientWorkout clw
on cl.ClientId=clw.ClientId
where clw.WorkoutId is null;

-- Which Beginner-Level Workouts satisfy at least one of Shell Creane's Goals?
-- Goals are associated to Clients through ClientGoal.
-- Goals are associated to Workouts through WorkoutGoal.
-- 6 rows, 4 unique rows
--------------------

select distinct w.WorkoutId,w.`name` WorkoutName
from Goal g
inner join WorkoutGoal wg
on g.GoalId=wg.GoalId
inner join Workout w
on wg.WorkoutId=w.WorkoutId
where w.LevelId=1 and g.`name` in
(select g.`name`
from Client cl
inner join ClientGoal cg
on cl.ClientId=cg.ClientId
inner join Goal g
on g.GoalId=cg.GoalId
where cl.FirstName='Shell' and cl.LastName='Creane');          
##not ideal answer, just use multiple inner joins as follows

#answerkey
SELECT
	w.WorkoutId,
	w.`Name` WorkoutName
FROM Client c
INNER JOIN ClientGoal cg ON c.ClientId = cg.ClientId
INNER JOIN WorkoutGoal wg ON cg.GoalId = wg.GoalId
INNER JOIN Workout w ON wg.WorkoutId = w.WorkoutId
WHERE c.FirstName = 'Shell'
AND c.LastName = 'Creane'
AND w.LevelId = 1;


-- Select all Workouts. 
-- Join to the Goal, 'Core Strength', but make it optional.
-- You may have to look up the GoalId before writing the main query.
-- If you filter on Goal.Name in a WHERE clause, Workouts will be excluded.
-- Why?
-- 26 Workouts, 3 Goals
--------------------
select w.`name`,g.`name` 
from Workout w
left join WorkoutGoal wg
on w.WorkoutId=wg.WorkoutId and wg.GoalId=10
left join Goal g
on g.GoalId=wg.GoalId;


-- The relationship between Workouts and Exercises is... complicated.
-- Workout links to WorkoutDay (one day in a Workout routine)
-- which links to WorkoutDayExerciseInstance 
-- (Exercises can be repeated in a day so a bridge table is required) 
-- which links to ExerciseInstance 
-- (Exercises can be done with different weights, repetions,
-- laps, etc...) 
-- which finally links to Exercise.
-- Select Workout.Name and Exercise.Name for related Workouts and Exercises.
--------------------
   select w.`name`,e.`name`
   from Workout w
   inner join WorkoutDayExerciseInstance wde
   on w.WorkoutId=wde.WorkoutDayId
   inner join ExerciseInstance ei
   on ei.ExerciseInstanceId=wde.ExerciseInstanceId
   inner join Exercise e
   on e.ExerciseId=ei.ExerciseId;
   
   
-- An ExerciseInstance is configured with ExerciseInstanceUnitValue.
-- It contains a Value and UnitId that links to Unit.
-- Example Unit/Value combos include 10 laps, 15 minutes, 200 pounds.
-- Select Exercise.Name, ExerciseInstanceUnitValue.Value, and Unit.Name
-- for the 'Plank' exercise. 
-- How many Planks are configured, which Units apply, and what are the configured Values?
-- 4 rows, 1 Unit, and 4 distinct Values

select i.`name` ExerciseName,eiv.`value`,u.`name` UnitName
from Exercise i
inner join ExerciseInstance ei
on ei.ExerciseId=i.ExerciseId
inner join ExerciseInstanceUnitValue eiv
on ei.ExerciseInstanceId=eiv.ExerciseInstanceId
inner join Unit u
on eiv.UnitId=u.UnitId
where i.`name`='Plank';
